@page "/find-your-loot"
@using DbContextSharLab;
@using Microsoft.EntityFrameworkCore;

@using Microsoft.JSInterop;

@using Blazorise;
@using Blazorise.Bootstrap;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Components;
@using YummyDrop_online_store.Services.CartService;
@using YummyDrop_online_store.Services.RandomizeService;
@using YummyDrop_online_store.Services.GeneratorService;
@using YummyDrop_online_store.Data;
@using YummySharedLibrary;
@inject IRandomizeService randomizer;
@inject IGeneratorService generator;
@inject ApplicationDbContext context;
@inject ICartService _cart;
 

<html>
    <head>
    <link rel="stylesheet" href="css/find_loot.css">
    <link rel="stylesheet" href="css/yummy_item_container.css" />
     
    </head>

    <body>
    <div>
        <h1>Randomize an item from the loot box!</h1>
        <button @onclick="onGetRandomYummyItem" style="border-radius: 10px;">Randomize YummyItem</button>

        <button @onclick="onGetUntilLemonWillNotBeDropped" style="border-radius: 10px;">Randomize Until Get My Lemon!</button>

        <button @onclick="onGetThousands" style="border-radius: 10px;">Randomize 1000 times!</button>



        @if (yummyItem != null || randIds.Count != 0)
        {
            <div style="margin-bottom: 10px;">
                <label>You tried: @tries time(s)</label>
            </div>

           <!--WHILE DEBUGING-->
           <!--
            <Blazorise.Modal @bind-Visible="showModal" ModalSize="Blazorise.ModalSize.Small" OnClosing="HandleClosing" PreventClosing="true" @ref="modalRef">
                <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                    <div class="modal-content">
                        <ModalHeader>
                            <h3>Modal Title</h3>
                        </ModalHeader>
                        <ModalBody>
                            <p>Modal Body Content</p>
                        </ModalBody>
                        <ModalFooter>
                            <button class="btn btn-success" @onclick="onAcceptItem">Take</button>
                            <button class="btn btn-danger" @onclick="onSellItem">Sell</button>
                        </ModalFooter>
                    </div>
                </div>
            </Blazorise.Modal>
                  -->
           
            @if(@multiCast < 2)
            {                
                <_FindYourLoot yummyItem="@yummyItem" />               
            }
            else
            {
                <label style="font-size: 18px; font-weight: bold; color: #ff0000; text-shadow: 2px 2px 2px #000000;"></label>
                
                @foreach(var item in randIds)
                {
                    <div style ="display: inline-block; margin-right: 10px;">
                        <_FindYourLoot yummyItem="@item" />
                    </div>
                    <!-- style="display: inline-block; margin-right: 10px;" -->
                }
            }


            <div style="margin-top: 15px;">
                <label>Your statistic is</label>
                <table>
                    <thead>
                        <tr>
                            <th style="padding: 0 75px;">Yummy Name</th>
                            <th style="padding: 0 75px;">Drop Quantity</th>
                            <th style="padding: 0 75px;">Theoretical Drop Chance</th>
                            <th style="padding: 0 75px;">Actual Drop Chance</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in statistics)
                        {
                            <tr>
                                <td style="padding: 0 75px;">@item.Key</td>
                                <td style="padding: 0 75px;">@item.Value</td>
                                <td style="padding: 0 75px;">@(LootList.FirstOrDefault(x => x.Name == item.Key)?.DropChance.ToString("F2"))%</td>
                                <td style="padding: 0 75px;">@(((double)item.Value / tries * 100).ToString("F2"))%</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div style="margin-top: 15px;">
                <label>Multicatsting statistic:</label>
                <table>
                    <thead>
                        <tr>
                            <th style="padding: 0 75px;"></th>
                            @foreach (var ch in MultiChance)
                            {
                                <th style="padding: 0 75px;">Multicast @ch.Key</th>
                            }                         
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td style="padding: 0 75px;">Quantity</td>
                            @foreach(var q in MultiStatistics)
                            {
                                <th style="padding: 0 75px;">@q.Value</th>
                            }
                        </tr>
                        <tr>
                            <td style="padding: 0 75px;">Theor chance</td>
                            @foreach(var ch in MultiChance){
                                 <td style="padding: 0 75px;">@ch.Value%</td>
                            }                           
                        </tr>
                        <tr>
                            <td style="padding: 0 75px;">Fact chance</td>
                            @foreach (var q in MultiStatistics)
                            {
                                <th style="padding: 0 75px;">@(((double)q.Value / MultiStatistics.Sum(x => x.Value)*100).ToString("F2"))%</th>
                            }
                        </tr>
                    </tbody>
                </table>
            </div>

        }
        else
        {
            <div>
                <h3>Not randomized yet!</h3>
            </div>
        }


    </div>

    </body>
</html>




@code {


    Blazorise.Modal modalRef;

    private void HandleClosing(Blazorise.ModalClosingEventArgs e)
    {
        Console.WriteLine("HandleClosing method called");
        e.Cancel = true;
    }




    public bool showModal = false;
    private int tries = 0;
    private YummyItem yummyItem;
    private List<YummyItem> LootList;
    private Dictionary<string, int> statistics = new Dictionary<string, int>();

    private static YummyItem _currentYummyItem;


    private Dictionary<int, double> MultiChance = new Dictionary<int, double>();

    private Dictionary<int, int> MultiStatistics = new Dictionary<int, int>();

    protected override async Task OnInitializedAsync()
    {
        var boxes = await context.FruitBoxTable.Include(box => box.BoxContent1).ToListAsync();
        var box1 = boxes[0];
        var boxcont = box1.BoxContent1;
        LootList = boxcont;

        foreach (var item in LootList)
        {
            statistics[item.Name] = 0;
        }

        //percentage
        MultiChance[1] = 85.37;
        MultiChance[2] = 11.59;
        MultiChance[3] = 2.04;
        MultiChance[4] = 1;

        foreach(var m in MultiChance)
        {
            MultiStatistics[m.Key] = 0;
        }

    }

    private void ShowModal() => showModal = true;
    private void HideModal() => showModal = false;

    private int multiCast = 0;
    /// <summary>
    /// Generates a random index from the LootList
    /// </summary>
    /// <returns>Random index</returns>
    /// <exception cref="Can throw an exception if LootList is null or empty"></exception>
    private int generateRandomIdByLootList()
    {
        if (LootList == null) throw new Exception("LootList is null");
        if (LootList.Count == 0) throw new Exception("LootList is empty");
        var Ids = generator.GenerateMillionIds(LootList);
        int randId = randomizer.GetRandomId(Ids);
        return randId;
    }



    private async Task onGetRandomYummyItem()
    {
        var multis = generator.GenerateMillionMulticast(MultiChance);
        multiCast = randomizer.GetRandomId(multis); 
        MultiStatistics[multiCast]++;
        if (multiCast > 1)
        {
            //if multicasting happend  
            await onMuticastingHappend();            
            return;
        }
        else
        {            
            int randId = generateRandomIdByLootList();
            yummyItem = LootList.Find(x => x.Id == randId);
            _currentYummyItem = yummyItem;
            tries++;
            statistics[yummyItem.Name]++;
            ShowModal();            
        }
    }

    private List<YummyItem> randIds = new List<YummyItem>();



    private async Task onMuticastingHappend()
    {
        randIds.Clear();

        for(int m = 0; m < multiCast; m++)
        {
            int randId = generateRandomIdByLootList();
            var yummyItem = LootList.Find(x => x.Id == randId);
            randIds.Add(yummyItem);
            tries++;
            statistics[yummyItem.Name]++;
        }
        randIds = randIds.OrderByDescending(c => c.Cost).ToList();
        await PlaySound();
        //Array.Sort(randIds.ToArray(), (x, y) => y.Cost.CompareTo(x.Cost));
        ShowModal();
    }





    private async Task onGetUntilLemonWillNotBeDropped()
    {
        tries = 0;
        ResetDictionary();
        string LowestChanceDrop = LootList.OrderBy(x => x.DropChance).First().Name;
        while (statistics[LowestChanceDrop] == 0)
        {
            var Ids = generator.GenerateMillionIds(LootList);
            int randId = randomizer.GetRandomId(Ids);
            yummyItem = LootList.Find(x => x.Id == randId);
            tries++;
            statistics[yummyItem.Name]++;

            await Task.Delay(100);
            StateHasChanged();
        }
    }

    private async Task onGetThousands()
    {
        tries = 0;
        ResetDictionary();
        for (int i = 0; i < 1000; i++)
        {
            await onGetRandomYummyItem();
            //var Ids = generator.GenerateMillionIds(LootList);
            //int randId = randomizer.GetRandomId(Ids);
            //yummyItem = LootList.Find(x => x.Id == randId);
            //tries++;
            //statistics[yummyItem.Name]++;


            await Task.Delay(100);
            StateHasChanged();
        }
    }

    private void ResetDictionary()
    {
        foreach (var item in LootList)
        {
            statistics[item.Name] = 0;
        }

        foreach (var m in MultiChance)
        {
            MultiStatistics[m.Key] = 0;
        }
    }


    private void onAcceptItem()
    {
        HideModal();
        if (_currentYummyItem != null){
            _cart.addToCart(_currentYummyItem);
            //int cartItemCount = _cart.CartItemCount;
            //_cart.UpdateCartItemCount(cartItemCount);
        }

        //var len = Cart.getLengthCart();
    }

    private void onSellItem()
    {
        HideModal();
    }


    [Inject] IJSRuntime JSRuntime { get; set; }

    private async Task PlaySound()
    {
        await JSRuntime.InvokeVoidAsync("playSound");
    }
}
